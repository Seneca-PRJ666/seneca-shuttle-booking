"use strict";

/**
 * This module provides services related to tokens. This is acting as
 * interface. It gets the Tokens from TokenProvider.
 * @module Services/TokenService
 * @author Badal Sarkar <badalsarkar86@gmail.com>
 */
import JWT from 'jsonwebtoken';
import TokenData from "../entities/tokenData.js";
import {ExpiredTokenError, InvalidArguments, InvalidTokenError} from "./services.errors.js";

/**
 * This class provides token related services. Tokens are generated by
 * token provider.
 */
class TokenService {
    constructor(tokenProvider) {
        this.tokenProvider = tokenProvider;
    }

    /**
     * Generates a token.
     * @param {TokenData} tokenData - The TokenData object that holds information to generate a token.
     * @returns {String} The generated token.
     * @throws InvalidArguments If the argument is not an instance of TokenData.
     */
    generateToken(tokenData) {
        if (!(tokenData instanceof TokenData)) {
            throw new InvalidArguments("Only TokenData is accepted as argument.")
        }
        return this.tokenProvider.sign(tokenData.payload, tokenData.secret, {expiresIn: tokenData.expiryTime});
    }

    /**
     * Verifies a token.
     * @param {String} token - The token to be verified.
     * @param {String} secret - The secret key to validate the token.
     * @returns {Object} The payload.
     * @throws ExpiredTokenError if the token is expired.
     * @throws InvalidTokenError if the token can't be validated.
     */
    verifyToken(token, secret = process.env.TOKEN_SECRET_KEY) {
        let payload = null;
        try {
            payload = this.tokenProvider.verify(token, secret, function (err, payload) {
                if (err) {
                    throw err;
                } else {
                    return payload;
                }
            })
        } catch (err) {
            if (err instanceof this.tokenProvider.TokenExpiredError) {
                throw new ExpiredTokenError("Token expired");
            }
            throw new InvalidTokenError("Token is invalid");
        }
        return payload;
    }

    /**
     * Decodes a token payload.
     * @param {!String} token - The token to be decoded.
     * @returns {Object|null} The payload is returned. If payload is invalid null value returned.
     */
    decodeToken(token) {
        return this.tokenProvider.decode(token);
    }

}

//instantiate a new user service object
const tokenService = new TokenService(JWT);
export default tokenService;

